{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","methodSort","setMethodSort","reverse","setReverse","visibleGoods","goods","copyOfGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAwBKA,E,4EAlBQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,K,uBAAAA,E,oBAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAEMC,EA9BR,SACEC,EADF,GAGa,IADTL,EACQ,EADRA,WAAYE,EACJ,EADIA,QAERI,EAAW,YAAOD,GAexB,OAbIL,GACFM,EAAYC,MAAK,SAACC,EAAeC,GAC/B,OAAQT,GACN,KAAKJ,EAASc,SACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXX,EACKI,EAAYJ,UAGdI,EAOcQ,CACnBjB,EACA,CAAEG,aAAYE,YAQhB,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYjB,IAAeJ,EAASc,WAEtCQ,QAAS,WACPjB,EAAcL,EAASc,WAN3B,iCAYA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYjB,IAAeJ,EAASgB,SAEtCM,QAAS,WACPjB,EAAcL,EAASgB,SAN3B,4BAYA,wBACEI,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAaf,IAEfgB,QAAS,WACPf,GAAYD,IANhB,sBAYEF,GAAcE,IACd,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WA/CjBjB,EAAc,IACdE,GAAW,IA2CL,sBAYJ,6BACGC,EAAae,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YC1HjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bffb5ae3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\n\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface GoodsParams {\n  methodSort: string;\n  reverse: true | false;\n}\n\nenum SortType {\n  ALPHABET = 'by alphabet',\n  LENGTH = 'by length',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  { methodSort, reverse }: GoodsParams,\n): string[] {\n  const copyOfGoods = [...goods];\n\n  if (methodSort) {\n    copyOfGoods.sort((good1: string, good2: string) => {\n      switch (methodSort) {\n        case SortType.ALPHABET:\n          return good1.localeCompare(good2);\n        case SortType.LENGTH:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    return copyOfGoods.reverse();\n  }\n\n  return copyOfGoods;\n}\n\nexport const App: React.FC = () => {\n  const [methodSort, setMethodSort] = useState('');\n  const [reverse, setReverse] = useState(false);\n\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { methodSort, reverse },\n  );\n\n  const sortAndReverse = () => {\n    setMethodSort('');\n    setReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': methodSort !== SortType.ALPHABET,\n          })}\n          onClick={() => {\n            setMethodSort(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': methodSort !== SortType.LENGTH,\n          })}\n          onClick={() => {\n            setMethodSort(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !reverse,\n          })}\n          onClick={() => {\n            setReverse(!reverse);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(methodSort || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              sortAndReverse();\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}